// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class EntomologyApp {
    constructor() {
        this.insects = [];
        this.filteredInsects = [];
        this.currentTheme = 'light';
        this.quizScore = 0;
        this.currentQuizQuestion = 0;
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init() {
        this.loadInsectsData();
        this.setupEventListeners();
        this.setupSearch();
        this.setupQuiz();
        this.setupMap();
        this.setupAnimations();
        this.setupTheme();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å–µ–∫–æ–º—ã—Ö
    loadInsectsData() {
        this.insects = [
            {
                id: 1,
                name: "–ú–∞—Ö–∞–æ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π",
                latinName: "Papilio machaon",
                type: "–ë–∞–±–æ—á–∫–∞",
                rarity: "–†–µ–¥–∫–∏–π",
                season: "–ú–∞–π-–°–µ–Ω—Ç—è–±—Ä—å",
                habitat: "–õ—É–≥–∞, –ø–æ–ª—è",
                description: "–ö—Ä—É–ø–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –±–∞–±–æ—á–∫–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∂–µ–ª—Ç—ã–º –æ–∫—Ä–∞—Å–æ–º",
                image: "ü¶ã",
                coordinates: [57.63, 39.87],
                facts: ["–ó–∞–Ω–µ—Å–µ–Ω –≤ –ö—Ä–∞—Å–Ω—É—é –∫–Ω–∏–≥—É", "–†–∞–∑–º–∞—Ö –∫—Ä—ã–ª—å–µ–≤ –¥–æ 9 —Å–º"]
            },
            {
                id: 2,
                name: "–ü—á–µ–ª–∞ –º–µ–¥–æ–Ω–æ—Å–Ω–∞—è",
                latinName: "Apis mellifera",
                type: "–ü—á–µ–ª–∞",
                rarity: "–û–±—ã—á–Ω—ã–π",
                season: "–ê–ø—Ä–µ–ª—å-–û–∫—Ç—è–±—Ä—å",
                habitat: "–°–∞–¥—ã, –ª—É–≥–∞",
                description: "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–µ–∫–æ–º–æ–µ, –≤–∞–∂–Ω—ã–π –æ–ø—ã–ª–∏—Ç–µ–ª—å",
                image: "üêù",
                coordinates: [57.60, 39.85],
                facts: ["–ñ–∏–≤—É—Ç –±–æ–ª—å—à–∏–º–∏ —Å–µ–º—å—è–º–∏", "–ü—Ä–æ–∏–∑–≤–æ–¥—è—Ç –º–µ–¥"]
            },
            {
                id: 3,
                name: "–ë–æ–∂—å—è –∫–æ—Ä–æ–≤–∫–∞",
                latinName: "Coccinella septempunctata",
                type: "–ñ—É–∫",
                rarity: "–û–±—ã—á–Ω—ã–π",
                season: "–ê–ø—Ä–µ–ª—å-–û–∫—Ç—è–±—Ä—å",
                habitat: "–°–∞–¥—ã, –ø–æ–ª—è",
                description: "–•–∏—â–Ω—ã–π –∂—É–∫, —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —Ç–ª—é",
                image: "üêû",
                coordinates: [57.65, 39.90],
                facts: ["–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –¥–æ 150 —Ç–ª–µ–π –≤ –¥–µ–Ω—å", "–ò–º–µ–µ—Ç 7 —Ç–æ—á–µ–∫ –Ω–∞ –∫—Ä—ã–ª—å—è—Ö"]
            },
            {
                id: 4,
                name: "–°—Ç—Ä–µ–∫–æ–∑–∞ –ø–ª–æ—Å–∫–∞—è",
                latinName: "Libellula depressa",
                type: "–°—Ç—Ä–µ–∫–æ–∑–∞",
                rarity: "–û–±—ã—á–Ω—ã–π",
                season: "–ú–∞–π-–ê–≤–≥—É—Å—Ç",
                habitat: "–í–æ–¥–æ–µ–º—ã",
                description: "–ë—ã—Å—Ç—Ä—ã–π —Ö–∏—â–Ω–∏–∫, –æ—Ö–æ—Ç–∏—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ",
                image: "ËúªËúì",
                coordinates: [57.62, 39.92],
                facts: ["–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –¥–æ 50 –∫–º/—á", "–•–∏—â–Ω–∏–∫"]
            }
        ];
        
        this.filteredInsects = [...this.insects];
        this.renderInsects();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleNavigation(e.target);
            });
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        document.getElementById('themeToggle').addEventListener('click', () => {
            this.toggleTheme();
        });

        // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        document.getElementById('menuToggle').addEventListener('click', () => {
            this.toggleMobileMenu();
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.getElementById('exploreBtn').addEventListener('click', () => {
            this.scrollToSection('species');
        });

        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('filterType').addEventListener('change', (e) => {
            this.applyFilters();
        });

        document.getElementById('filterRarity').addEventListener('change', (e) => {
            this.applyFilters();
        });
    }

    // –ü–æ–∏—Å–∫ –Ω–∞—Å–µ–∫–æ–º—ã—Ö
    setupSearch() {
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');

        searchInput.addEventListener('input', (e) => {
            this.handleSearch(e.target.value);
        });

        searchBtn.addEventListener('click', () => {
            this.handleSearch(searchInput.value);
        });

        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleSearch(e.target.value);
            }
        });
    }

    handleSearch(query) {
        if (query.length < 2) {
            this.filteredInsects = [...this.insects];
        } else {
            this.filteredInsects = this.insects.filter(insect => 
                insect.name.toLowerCase().includes(query.toLowerCase()) ||
                insect.latinName.toLowerCase().includes(query.toLowerCase()) ||
                insect.type.toLowerCase().includes(query.toLowerCase()) ||
                insect.description.toLowerCase().includes(query.toLowerCase())
            );
        }
        this.renderInsects();
        this.updateSearchResults();
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    applyFilters() {
        const typeFilter = document.getElementById('filterType').value;
        const rarityFilter = document.getElementById('filterRarity').value;

        this.filteredInsects = this.insects.filter(insect => {
            const typeMatch = typeFilter === 'all' || insect.type === typeFilter;
            const rarityMatch = rarityFilter === 'all' || insect.rarity === rarityFilter;
            return typeMatch && rarityMatch;
        });

        this.renderInsects();
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –Ω–∞—Å–µ–∫–æ–º—ã—Ö
    renderInsects() {
        const container = document.getElementById('insectsContainer');
        if (!container) return;

        container.innerHTML = this.filteredInsects.map(insect => `
            <div class="insect-card" data-id="${insect.id}">
                <div class="insect-image">${insect.image}</div>
                <div class="insect-info">
                    <h3>${insect.name}</h3>
                    <p class="latin-name">${insect.latinName}</p>
                    <div class="insect-meta">
                        <span class="type ${insect.type.toLowerCase()}">${insect.type}</span>
                        <span class="rarity ${insect.rarity.toLowerCase()}">${insect.rarity}</span>
                    </div>
                    <p class="description">${insect.description}</p>
                    <div class="insect-details">
                        <span>üïí ${insect.season}</span>
                        <span>üìç ${insect.habitat}</span>
                    </div>
                    <button class="details-btn" onclick="app.showInsectDetails(${insect.id})">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                </div>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.animateCards();
    }

    // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    showInsectDetails(insectId) {
        const insect = this.insects.find(i => i.id === insectId);
        if (!insect) return;

        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close">&times;</span>
                <div class="modal-header">
                    <div class="modal-image">${insect.image}</div>
                    <div>
                        <h2>${insect.name}</h2>
                        <p class="latin-name">${insect.latinName}</p>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="info-grid">
                        <div class="info-item">
                            <strong>–¢–∏–ø:</strong>
                            <span>${insect.type}</span>
                        </div>
                        <div class="info-item">
                            <strong>–†–µ–¥–∫–æ—Å—Ç—å:</strong>
                            <span class="rarity ${insect.rarity.toLowerCase()}">${insect.rarity}</span>
                        </div>
                        <div class="info-item">
                            <strong>–°–µ–∑–æ–Ω:</strong>
                            <span>${insect.season}</span>
                        </div>
                        <div class="info-item">
                            <strong>–ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è:</strong>
                            <span>${insect.habitat}</span>
                        </div>
                    </div>
                    <div class="facts">
                        <h3>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:</h3>
                        <ul>
                            ${insect.facts.map(fact => `<li>${fact}</li>`).join('')}
                        </ul>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.querySelector('.close').addEventListener('click', () => {
            document.body.removeChild(modal);
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
    }

    // –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    setupQuiz() {
        this.quizQuestions = [
            {
                question: "–ö–∞–∫–∞—è –±–∞–±–æ—á–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ –ö—Ä–∞—Å–Ω—É—é –∫–Ω–∏–≥—É –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?",
                options: ["–ö–∞–ø—É—Å—Ç–Ω–∏—Ü–∞", "–ú–∞—Ö–∞–æ–Ω", "–ö—Ä–∞–ø–∏–≤–Ω–∏—Ü–∞", "–ê–¥–º–∏—Ä–∞–ª"],
                correct: 1
            },
            {
                question: "–ö–∞–∫–æ–µ –Ω–∞—Å–µ–∫–æ–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –æ–ø—ã–ª–∏—Ç–µ–ª–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–π?",
                options: ["–ö–æ–º–∞—Ä", "–ü—á–µ–ª–∞", "–ú—É—Ö–∞", "–û—Å–∞"],
                correct: 1
            },
            {
                question: "–°–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –æ–±—ã—á–Ω–æ —É —Å–µ–º–∏—Ç–æ—á–µ—á–Ω–æ–π –±–æ–∂—å–µ–π –∫–æ—Ä–æ–≤–∫–∏?",
                options: ["5", "6", "7", "8"],
                correct: 2
            }
        ];

        document.getElementById('startQuiz').addEventListener('click', () => {
            this.startQuiz();
        });

        document.getElementById('nextQuestion').addEventListener('click', () => {
            this.nextQuestion();
        });

        document.getElementById('restartQuiz').addEventListener('click', () => {
            this.restartQuiz();
        });
    }

    startQuiz() {
        this.quizScore = 0;
        this.currentQuizQuestion = 0;
        document.getElementById('quizStart').style.display = 'none';
        document.getElementById('quizGame').style.display = 'block';
        this.showQuestion();
    }

    showQuestion() {
        if (this.currentQuizQuestion >= this.quizQuestions.length) {
            this.showQuizResults();
            return;
        }

        const question = this.quizQuestions[this.currentQuizQuestion];
        document.getElementById('quizQuestion').textContent = question.question;
        
        const optionsContainer = document.getElementById('quizOptions');
        optionsContainer.innerHTML = question.options.map((option, index) => `
            <button class="quiz-option" onclick="app.checkAnswer(${index})">
                ${option}
            </button>
        `).join('');

        document.getElementById('quizProgress').textContent = 
            `–í–æ–ø—Ä–æ—Å ${this.currentQuizQuestion + 1} –∏–∑ ${this.quizQuestions.length}`;
    }

    checkAnswer(selectedIndex) {
        const question = this.quizQuestions[this.currentQuizQuestion];
        const options = document.querySelectorAll('.quiz-option');
        
        options.forEach((option, index) => {
            option.disabled = true;
            if (index === question.correct) {
                option.classList.add('correct');
            } else if (index === selectedIndex) {
                option.classList.add('incorrect');
            }
        });

        if (selectedIndex === question.correct) {
            this.quizScore++;
        }

        setTimeout(() => {
            this.currentQuizQuestion++;
            this.showQuestion();
        }, 2000);
    }

    showQuizResults() {
        document.getElementById('quizGame').style.display = 'none';
        document.getElementById('quizResults').style.display = 'block';
        document.getElementById('finalScore').textContent = 
            `${this.quizScore} –∏–∑ ${this.quizQuestions.length}`;
        
        const percentage = (this.quizScore / this.quizQuestions.length) * 100;
        let message = "";
        
        if (percentage >= 80) message = "–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–Ω—Ç–æ–º–æ–ª–æ–≥!";
        else if (percentage >= 60) message = "–•–æ—Ä–æ—à–æ! –í—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ –Ω–∞—Å–µ–∫–æ–º—ã—Ö!";
        else message = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ù–∞—Å–µ–∫–æ–º—ã–µ - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!";
        
        document.getElementById('quizMessage').textContent = message;
    }

    nextQuestion() {
        this.currentQuizQuestion++;
        this.showQuestion();
    }

    restartQuiz() {
        document.getElementById('quizResults').style.display = 'none';
        document.getElementById('quizStart').style.display = 'block';
    }

    // –ö–∞—Ä—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    setupMap() {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –Ω–∞—Å–µ–∫–æ–º—ã–º–∏
        const mapContainer = document.getElementById('insectsMap');
        if (!mapContainer) return;

        mapContainer.innerHTML = `
            <div class="map-placeholder">
                <h3>–ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å–µ–∫–æ–º—ã—Ö</h3>
                <div class="map-points">
                    ${this.insects.map(insect => `
                        <div class="map-point" style="top: ${insect.coordinates[0] % 50}%; left: ${insect.coordinates[1] % 50}%;" 
                             title="${insect.name}">
                            ${insect.image}
                        </div>
                    `).join('')}
                </div>
                <p>–ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±–∏—Ç–∞–Ω–∏—è –Ω–∞—Å–µ–∫–æ–º—ã—Ö –≤ –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏</p>
            </div>
        `;
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    setupAnimations() {
        this.animateCards();
        this.setupScrollAnimations();
    }

    animateCards() {
        const cards = document.querySelectorAll('.insect-card');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
            card.classList.add('fade-in-up');
        });
    }

    setupScrollAnimations() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.animate-on-scroll').forEach(el => {
            observer.observe(el);
        });
    }

    // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
    setupTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            this.currentTheme = savedTheme;
            this.applyTheme();
        }
    }

    toggleTheme() {
        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.applyTheme();
        localStorage.setItem('theme', this.currentTheme);
    }

    applyTheme() {
        document.body.setAttribute('data-theme', this.currentTheme);
        const themeBtn = document.getElementById('themeToggle');
        themeBtn.textContent = this.currentTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    handleNavigation(clickedLink) {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        clickedLink.classList.add('active');
        
        const targetSection = clickedLink.getAttribute('href').substring(1);
        this.scrollToSection(targetSection);
    }

    scrollToSection(sectionId) {
        const element = document.getElementById(sectionId);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
        }
    }

    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    toggleMobileMenu() {
        const navMenu = document.getElementById('navMenu');
        navMenu.classList.toggle('active');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    updateSearchResults() {
        const resultsCount = document.getElementById('resultsCount');
        if (resultsCount) {
            resultsCount.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${this.filteredInsects.length} –Ω–∞—Å–µ–∫–æ–º—ã—Ö`;
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStatistics() {
        const stats = {
            total: this.insects.length,
            byType: {},
            byRarity: {}
        };

        this.insects.forEach(insect => {
            stats.byType[insect.type] = (stats.byType[insect.type] || 0) + 1;
            stats.byRarity[insect.rarity] = (stats.byRarity[insect.rarity] || 0) + 1;
        });

        return stats;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    exportData() {
        const dataStr = JSON.stringify(this.insects, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'nasekomye-yaroslavl.json';
        link.click();
        URL.revokeObjectURL(url);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new EntomologyApp();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∞—Ç—Ä–∏–±—É—Ç–æ–≤
window.showInsectDetails = (id) => app.showInsectDetails(id);
window.startQuiz = () => app.startQuiz();
window.nextQuestion = () => app.nextQuestion();
window.restartQuiz = () => app.restartQuiz();

// Service Worker –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–∞–±–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js')
        .then(registration => console.log('SW registered'))
        .catch(error => console.log('SW registration failed'));
}
